// <auto-generated />
using System;
using CityCRUD.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CityCRUD.Migrations
{
    [DbContext(typeof(books_db_klychevContext))]
    partial class books_db_klychevContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CityCRUD.Models.Authors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthday")
                        .HasColumnName("birthday")
                        .HasColumnType("date");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnName("lastname")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("authors");
                });

            modelBuilder.Entity("CityCRUD.Models.Books", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cost")
                        .HasColumnName("cost")
                        .HasColumnType("int");

                    b.Property<int>("IdAuthor")
                        .HasColumnName("id_author")
                        .HasColumnType("int");

                    b.Property<int>("IdPublishingHouse")
                        .HasColumnName("id_publishing_house")
                        .HasColumnType("int");

                    b.Property<int>("Pages")
                        .HasColumnName("pages")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdAuthor");

                    b.HasIndex("IdPublishingHouse");

                    b.ToTable("books");
                });

            modelBuilder.Entity("CityCRUD.Models.Cities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("cities");
                });

            modelBuilder.Entity("CityCRUD.Models.DeliveryCompanies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("IdCity")
                        .HasColumnName("id_city")
                        .HasColumnType("int");

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasColumnName("INN")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("NameOfResponsiblePerson")
                        .IsRequired()
                        .HasColumnName("name_of_responsible_person")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasColumnType("varchar(11)")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdCity");

                    b.ToTable("delivery_companies");
                });

            modelBuilder.Entity("CityCRUD.Models.PublishingHouses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdCity")
                        .HasColumnName("id_city")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdCity");

                    b.ToTable("publishing_houses");
                });

            modelBuilder.Entity("CityCRUD.Models.Purchases", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("int");

                    b.Property<int>("IdBook")
                        .HasColumnName("id_book")
                        .HasColumnType("int");

                    b.Property<int>("IdDeliveryCompany")
                        .HasColumnName("id_delivery_company")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeOfPurchase")
                        .HasColumnName("time_of_purchase")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdBook");

                    b.HasIndex("IdDeliveryCompany");

                    b.ToTable("purchases");
                });

            modelBuilder.Entity("CityCRUD.Models.Books", b =>
                {
                    b.HasOne("CityCRUD.Models.Authors", "IdAuthorNavigation")
                        .WithMany("Books")
                        .HasForeignKey("IdAuthor")
                        .HasConstraintName("FK__books__id_author__3E52440B")
                        .IsRequired();

                    b.HasOne("CityCRUD.Models.PublishingHouses", "IdPublishingHouseNavigation")
                        .WithMany("Books")
                        .HasForeignKey("IdPublishingHouse")
                        .HasConstraintName("FK__books__id_publis__3F466844")
                        .IsRequired();
                });

            modelBuilder.Entity("CityCRUD.Models.DeliveryCompanies", b =>
                {
                    b.HasOne("CityCRUD.Models.Cities", "IdCityNavigation")
                        .WithMany("DeliveryCompanies")
                        .HasForeignKey("IdCity")
                        .HasConstraintName("FK__delivery___id_ci__4222D4EF")
                        .IsRequired();
                });

            modelBuilder.Entity("CityCRUD.Models.PublishingHouses", b =>
                {
                    b.HasOne("CityCRUD.Models.Cities", "IdCityNavigation")
                        .WithMany("PublishingHouses")
                        .HasForeignKey("IdCity")
                        .HasConstraintName("FK__publishin__id_ci__3B75D760")
                        .IsRequired();
                });

            modelBuilder.Entity("CityCRUD.Models.Purchases", b =>
                {
                    b.HasOne("CityCRUD.Models.Books", "IdBookNavigation")
                        .WithMany("Purchases")
                        .HasForeignKey("IdBook")
                        .HasConstraintName("FK__purchases__id_bo__44FF419A")
                        .IsRequired();

                    b.HasOne("CityCRUD.Models.DeliveryCompanies", "IdDeliveryCompanyNavigation")
                        .WithMany("Purchases")
                        .HasForeignKey("IdDeliveryCompany")
                        .HasConstraintName("FK__purchases__id_de__45F365D3")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
